@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Заставляем диаграмму располагаться слева направо и убираем скругление стрелок
left to right direction
skinparam roundCorner 0

' Основная система InsureTech Prod разделена на логические группы
System_Boundary(s1, "InsureTech Prod") {
  System_Boundary(back_end, "Back-End") {
    Container(core_db, "core-db", "PostgreSQL", "Хранит тарифы страховых компаний и заявки клиентов")
    Container(core_app, "core-app", "Kotlin, SpringBoot", "Монолитное приложение для отображения страховых продуктов, оформления новых страховок и показа купленных полисов")
  }
  System_Boundary(front_end, "Front-End") {
    Container(web_app, "InsureTech Web", "JavaScript, React", "Веб-приложение для получения тарифов и создания заявок на страховки")
  }
  System_Boundary(services, "Сервисы") {
    Container(product_aggregator, "ins-product-aggregator", "Kotlin, SpringBoot", "Интеграция со страховыми компаниями и единый API для core-app")
    Container(comp_settlement, "ins-comp-settlement", "Kotlin, SpringBoot", "Сервис для проведения взаиморасчётов со страховыми компаниями")
    Container(settlement_db, "ins-comp-settlement-db", "PostgreSQL", "Хранит данные об оформленных страховках, расчетах и информации о клиентах")
    Container(client_info, "client-info", "Kotlin, SpringBoot", "Сервис для учёта клиентских данных")
  }
}

' Внешние системы также сгруппированы
System_Boundary(externals, "Внешние системы") {
  System_Boundary(partners, "Партнёры") {
    System_Ext(partner_system1, "Партнерская система 1", "Интегрирует страховые услуги в свои продукты")
    System_Ext(partner_system2, "Партнерская система 2", "Интегрирует страховые услуги в свои продукты")
    System_Ext(partner_system3, "Партнерская система 3", "Интегрирует страховые услуги в свои продукты")
  }
  System_Boundary(insurance, "Системы страховых компаний") {
    System_Ext(insurance_system1, "Страховая система 1", "Предоставляет API для тарифов, андерайтинга и оформления страховых продуктов")
    System_Ext(insurance_system2, "Страховая система 2", "Предоставляет API для тарифов, андерайтинга и оформления страховых продуктов")
    System_Ext(insurance_system3, "Страховая система 3", "Предоставляет API для тарифов, андерайтинга и оформления страховых продуктов")
  }
  System_Ext(payment_service, "Платёжный сервис", "Внешний сервис для оплаты страховок")
}

' Внешний актор
Person(client, "Клиент", "Пользователь системы")

' Взаимодействия внутри InsureTech Prod
Rel(core_app, core_db, "Читает/записывает данные", "JDBC")
Rel(web_app, core_app, "Получение тарифов и оформление заявок", "HTTP/REST")
Rel(core_app, product_aggregator, "Запрос информации по продуктам и тарифам", "REST / SOAP / GraphQL")
Rel(product_aggregator, insurance_system1, "Получение данных о продуктах", "REST / SOAP / GraphQL")
Rel(product_aggregator, insurance_system2, "Получение данных о продуктах", "REST")
Rel(product_aggregator, insurance_system3, "Получение данных о продуктах", "REST")
Rel(core_app, comp_settlement, "Запрос на проведение взаиморасчётов", "REST")
Rel(comp_settlement, settlement_db, "Читает/записывает данные о страховках и расчетах", "TCP / REST")
Rel(client_info, settlement_db, "Получение/сохранение данных о клиентах", "REST / TCP")

' Взаимодействия с внешними системами
Rel(web_app, partner_system1, "Получение данных", "TCP")
Rel(web_app, partner_system2, "Получение данных", "TCP")
Rel(web_app, partner_system3, "Получение данных", "TCP")
Rel(comp_settlement, payment_service, "Проведение оплаты", "HTTP")
Rel(payment_service, comp_settlement, "Перенаправление оплаты", "HTTP")

' Взаимодействия с пользователем
Rel(client, web_app, "Подаёт заявку на страховку", "HTTPS")
Rel(client, comp_settlement, "Получает информацию о страховании", "HTTPS")

@enduml
